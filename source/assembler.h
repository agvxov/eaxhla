#ifndef ASSEMBLER_H
#define ASSEMBLER_H

enum {
	D8,
	D16,
	D32,
	D64
};

enum {
	REL,
	REG,
	MEM,
	IMM
};

enum {
	ASMDIRMEM,
	ASMDIRREL,
	ASMDIRIMM,
	ASMDIRREP,
	ADD,
	OR,
	ADC,
	SBB,
	AND,
	SUB,
	XOR,
	CMP,
	INC,
	DEC,
	NOT,
	NEG,
	MUL,
	IMUL,
	DIV,
	IDIV,
	NOP,
	RETN,
	RETF,
	LEAVE,
	LOCK,
	HLT,
	POPF,
	PUSHF,
	WAIT,
	CLC,
	CLD,
	CLI,
	STC,
	STD,
	STI,
	CMC,
	INSB,
	INSD,
	OUTSB,
	OUTSD,
	CDQ,
	CWDE,
	INAL,
	INEAX,
	INT3,
	IRETD,
	LODSB,
	LODSD,
	OUTAL,
	OUTEAX,
	SCASB,
	SCASD,
	STOSB,
	STOSD,
	SYSENTER,
	SYSEXIT,
	SYSCALL,
	SYSRET,
	PAUSE,
	CPUID,
	EMMS,
	RSM,
	FNOP,
	FCHS,
	FABS,
	FTST,
	FXAM,
	FLD1,
	FLDL2T,
	FLDL2E,
	FLDPI,
	FLDLG2,
	FLDLN2,
	FLDZ,
	F2XM1,
	FYL2X,
	FPTAN,
	FPATAN,
	FXTRACT,
	FPREM1,
	FDECSTP,
	FINCSTP,
	FPREM,
	FYL2XP1,
	FSQRT,
	FSINCOS,
	FRNDINT,
	FSCALE,
	FSIN,
	FCOS,
	INSW,
	OUTSW,
	CWD,
	CQO,
	CBW,
	CDQE,
	INVD,
	WBINVD,
	UD2,
	CLTS,
	INAX,
	IRETQ,
	LODSW,
	LODSQ,
	OUTAX,
	RDPMC,
	RDMSR,
	RDTSC,
	SCASW,
	SCASQ,
	STOSW,
	STOSQ,
	WRMSR,
	XLATB,
	ENTER,
	CALL,
	IN,
	OUT,
	JMP,
	JO,
	JNO,
	JB,
	JAE,
	JE,
	JNE,
	JBE,
	JA,
	JS,
	JNS,
	JPE,
	JPO,
	JL,
	JGE,
	JLE,
	JG,
	MOV,
	CMOVO,
	CMOVNO,
	CMOVB,
	CMOVAE,
	CMOVE,
	CMOVNE,
	CMOVBE,
	CMOVA,
	CMOVS,
	CMOVNS,
	CMOVPE,
	CMOVPO,
	CMOVL,
	CMOVGE,
	CMOVLE,
	CMOVG,
	PUSH,
	POP,
	BSWAP,
	TEST,
	RCL,
	RCR,
	ROL,
	ROR,
	SHL,
	SHR,
	SAL,
	SAR,
	REP,
	REPE,
	REPNE,
	REPZ,
	REPNZ,
	LOOP,
	LOOPE,
	LOOPNE,
	MOVBE,
	XADD,
	XCHG,
	LEA,
	POPCNT,
	BSF,
	BSR,
	FADD,
	FMUL,
	FCOM,
	FCOMP,
	FSUB,
	FSUBR,
	FDIV,
	FDIVR
};

enum {
	GR0,
	GR1,
	GR2,
	GR3,
	GR4,
	GR5,
	GR6,
	GR7,
	GR8,
	GR9,
	GR10,
	GR11,
	GR12,
	GR13,
	GR14,
	GR15
};

extern unsigned int    text_entry_point;
extern unsigned int    text_sector_size;
extern unsigned char * text_sector_byte;

extern int was_instruction_array_empty;

extern void assemble (unsigned int count, unsigned int * array);

#endif
